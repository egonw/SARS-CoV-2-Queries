// Copyright (c) 2009-2018  Egon Willighagen <egon.willighagen@gmail.com>
//
// GPL v3

import java.io.*;
import java.util.*;

runSuffix = ".rq";
srcSuffix = runSuffix;

inFile = args[0];
lang = args[1];

labels = [
  "run": [
    "en": "run",
    "nl": "uitvoeren"
  ],
  "edit": [
    "en": "edit",
    "nl": "bewerken"
  ],
  "or": [
    "en": "or",
    "nl": "of"
  ],
  "code_examples": [
    "en": "Code examples",
    "nl": "Broncode voorbeelden"
  ],
  "license": [
    "en": "This SPARQL query is available under CCZero.",
    "nl": "Deze SPARQL zoekopdracht is beschikbaar als CCZero"
  ],
  "output": [
    "en": "Output",
    "nl": "Resultaten"
  ]
]

runClass = inFile.substring(0,inFile.indexOf(runSuffix));
runExt = runSuffix.substring(1)
srcExt = srcSuffix.substring(1)
runFile = runClass + runSuffix;
srcFile = runClass + srcSuffix

// create Markdown files
md = new StringBuffer();

// read the input
reader = new BufferedReader(
  new FileReader(srcFile)
);
line = reader.readLine();
while (line != null) {
  if (line.trim().length() > 0) {
    if (line.charAt(0) == '#') {
      if (line.startsWith("#defaultView"))
        md.append(line+"\n");
    } else if (line.charAt(0) == '%') {
      md.append(line.substring(1)+"\n");
    } else {
      if (line.contains("<lang/>")) line = line.replace("<lang/>", lang)
      md.append(line+"\n");
    }
  }  
  line = reader.readLine();
}

mdTypes = new ArrayList();
mdTypes.add("verbatim");
mdTypes.add("code");
mdTypes.add("iframe");

def srcLines = new File(srcFile).readLines()
unencodedSPARQL = ""
srcLines.each { String srcLine -> unencodedSPARQL += srcLine + "\n" }
if (unencodedSPARQL.contains("<lang/>"))
  unencodedSPARQL = unencodedSPARQL.replace("<lang/>", lang)
encodedSPARQL = java.net.URLEncoder.encode(unencodedSPARQL, "UTF-8")
encodedSPARQL = encodedSPARQL.replace("+","%20");
runURL = "https://query.wikidata.org/embed.html#" + encodedSPARQL
editURL = "https://query.wikidata.org/#" + encodedSPARQL

for (int type=0; type<mdTypes.size(); type++) {
  mdFile = runClass + "." + mdTypes.get(type) + ".${lang}.md";
  mdWriter = new FileWriter(
    new File(mdFile)
  );
  template = new BufferedReader(
    new FileReader(new File("md." + mdTypes.get(type) + ".template"))
  );
  line = template.readLine();
  while (line != null) {
    if (line.length() > 0) {
      if (line.contains("%MD%")) {
        line = line.replace("%MD%", md.toString());
      } else if (line.contains("%STEM%")) {
        line = line.replace("%STEM%", runClass);
        line = line.replace("%EXT%", srcExt);
        if (line.contains("%RUNURL%")) line = line.replace("%RUNURL%", runURL);
        line = line + "\n";
      } else if (line.contains("%SYNTAX%")) {
        line = line.replace("%SYNTAX%", srcExt);
        line = line + "\n";
      } else if (line.contains("%SOURCECODE%")) {
        srcLines = new File(srcFile).readLines()
        srcLines.each { String srcLine -> 
          if (srcLine.contains("<lang/>")) srcLine = srcLine.replace("<lang/>", lang)
          mdWriter.write(srcLine + "\n")
        }
        line = ""
      } else if (line.contains("%OUT%")) {
        srcLines = new File(runClass + ".${lang}.out").readLines()
        srcLines.each { String srcLine -> mdWriter.write(srcLine + "\n") }
        line = ""
      } else {
        line = line + "\n";
      }
      if (line.contains("%RUNURL%")) {
        line = line.replace("%RUNURL%", runURL);
        line = line + "\n";
      }
      if (line.contains("%EDITURL%")) {
        line = line.replace("%EDITURL%", editURL);
        line = line + "\n";
      }
      while (line.contains("%LABEL_")) {
        lineRemainder = line.substring(line.indexOf("%LABEL_")).substring(7)
        label = lineRemainder.substring(0, lineRemainder.indexOf("%"))
        line = line.replace("%LABEL_${label}%", labels[label.toLowerCase()][lang]);
      }
      mdWriter.write(line);
    }
    line = template.readLine();
  }
  mdWriter.close();
}

